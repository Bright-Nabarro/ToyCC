# 开始符
CompUnit    ::= FuncDef;

# 函数定义与返回类型
	[只有外部链接] FuncDef     ::= BuiltinType Ident "(" ParamList ")" Block;
	

# 函数参数列表定义
ParamList	::= /* empty */ | Param | ParamList ',' Param
Param       ::= ScalarType Ident; 

# 基本类型
	[只有s, uint] ScalarType		::= SINT | UINT 	#在lexer.ll中定义其正则表达式
	[同上] BuiltinType		::= ScalarType | "void" ;


# 声明
	[新增文法逻辑, 返回类型可能需要修改] Decl			::=  ConstDecl | VarDecl; 
## ConstDefList有逗号分隔，无法将ConstDef省略
ConstDecl 		::= "eval" ScalarType ConstDef ConstDefList ";";
#定义
ConstDef		::= Ident "=" ConstInitVal; 	# 赋值的逻辑在其handler中完成
	[返回类型可能需要修改] ConstDefList 	::= /* empty */ | ConstDefList ',' ConstDef
ConstInitVal 	::= ConstExpr;
VarDecl 		::= ScalarType VarDef VarDefList ";";
VarDef 			::= Ident | Ident "=" InitVal;
VarDefList		::= /* empty */ | VarDefList ',' VarDef ;
InitVal 		::= Expr;

# 块 (暂时不支持嵌套块)
	[没有作用域处理] Block       	::= "{" BlockItemList "}";
BlockItemList 	::= /* empty */ | BlockItem BlockItemList
## 每个BlockItem 就是分号分隔的语句
BlockItem		::= Decl | Stmt;

LVal			::= Ident;

# 语句
	[未处理多返回值的错误情况, 符号表查找逻辑代实现] Stmt        	::= "return" Expr ";";

ConstExpr		::= Expr;
Expr        	::= LOrExpr;

# 以下优先级从高到低
# https://zh.cppreference.com/w/c/language/operator_precedence
PrimaryExpr ::= "(" Expr ")" | Number | LVal;
## 2 一元表达式
UnaryExpr   ::= PrimaryExpr | UnaryOp UnaryExpr;
	[只支持int] UnaryOp     ::= "+" | "-" | "!";
## 3 乘，除，取余表达式
L3Expr      ::= UnaryExpr | L3Expr L3Op UnaryExpr;
L3Op		::= "*" | "/" | "%"
## 4 加, 减表达式
L4Expr 		::= L3Expr | L4Expr L4Op L3Expr;
L4Op		::= "+" | "-"
## 6 
L6Expr		::= L4Expr | L6Expr L6Op L4Expr;
L6Op		::= "<" | ">" | "<=" | ">="
## 7
L7Expr      ::= L6Expr | L7Expr L7Op L6Expr;
L7Op		::= "==" | "!="
## 8
LAndExpr	::= L7Expr | LAndExpr LAndOp L7Expr;
	[int扩展作为一个可选项] LAndOp		::= "&&"
## 9
LOrExpr		::= LAndExpr | LOrExpr LOrOp LAndExpr;
	[同and] LOrOp		::= "||"

Number      ::= INT_LITERAL;
Ident       ::= [a-zA-Z_][0-9a-zA-Z_]*;

